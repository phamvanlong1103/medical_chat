import os
import streamlit as st
from dotenv import load_dotenv

# G·ªçi h√†m t·∫°o chain t·ª´ file retrieval_qa.py
from chains.retrieval_qa import create_retrieval_qa_chain

# Load bi·∫øn m√¥i tr∆∞·ªùng (n·∫øu c·∫ßn)
load_dotenv()
# openai_api_key = st.secrets.get("OPENAI_API_KEY")
openai_api_key = os.getenv("OPENAI_API_KEY")
if not openai_api_key:
    openai_api_key =  st.secrets.get("OPENAI_API_KEY")

if not openai_api_key:
    st.error("Kh√¥ng t√¨m th·∫•y OPENAI_API_KEY trong st.secrets ho·∫∑c bi·∫øn m√¥i tr∆∞·ªùng!")
# else:
#     st.write("ƒê√£ l·∫•y ƒë∆∞·ª£c OPENAI_API_KEY th√†nh c√¥ng.")
    
def main():
    st.title("ü§ñ Chatbot Y T·∫ø AI - RAG")

    # Kh·ªüi t·∫°o chain RAG
    qa_chain = create_retrieval_qa_chain(openai_api_key)

    # Giao di·ªán: user nh·∫≠p c√¢u h·ªèi
    user_query = st.text_input("Nh·∫≠p c√¢u h·ªèi v·ªÅ s·ª©c kho·∫ª c·ªßa b·∫°n...")

    if st.button("G·ª≠i c√¢u h·ªèi"):
        if not user_query.strip():
            st.warning("Vui l√≤ng nh·∫≠p n·ªôi dung c√¢u h·ªèi!")
        else:
            with st.spinner("ƒêang x·ª≠ l√Ω..."):
                result = qa_chain.run(user_query)
            st.markdown(f"**C√¢u tr·∫£ l·ªùi:** {result}")
            st.info("ƒê√¢y ch·ªâ l√† khuy·∫øn ngh·ªã. H√£y g·∫∑p b√°c sƒ© ƒë·ªÉ ƒë∆∞·ª£c ch·∫©n ƒëo√°n ch√≠nh x√°c.")

if __name__ == "__main__":
    main()
