from openai import OpenAI
import streamlit as st
from prompts import BASE_SYSTEM_PROMPT, CARDIO_SYSTEM_PROMPT, RESPIRATORY_SYSTEM_PROMPT

# Kh·ªüi t·∫°o client OpenAI

# H√†m t·∫°o ph·∫£n h·ªìi t·ª´ GPT
def generate_response(prompt):
    try:
        response = client.chat.completions.create(
           model="gpt-4o-mini",
        messages=[
        {"role": "system", "content": BASE_SYSTEM_PROMPT},   
        {"role": "user", "content": prompt}
    ],
    max_tokens=500,
    temperature=0.7
    )
        return response.choices[0].message.content
    except Exception as e:
        return f"L·ªói khi t·∫°o ph·∫£n h·ªìi: {e}"

# Giao di·ªán Streamlit
st.title("ü§ñ Chatbot Y T·∫ø AI")
st.write("Xin ch√†o! T√¥i l√† tr·ª£ l√Ω y t·∫ø AI. H√£y h·ªèi t√¥i b·∫•t k·ª≥ c√¢u h·ªèi n√†o v·ªÅ s·ª©c kh·ªèe c·ªßa b·∫°n.")

# L∆∞u tr·ªØ l·ªãch s·ª≠ chat
if "messages" not in st.session_state:
    st.session_state.messages = []

# Hi·ªÉn th·ªã l·ªãch s·ª≠ chat
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

# Nh·∫≠p c√¢u h·ªèi t·ª´ ng∆∞·ªùi d√πng
if prompt := st.chat_input("Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n..."):
    # Th√™m c√¢u h·ªèi v√†o l·ªãch s·ª≠
    st.session_state.messages.append({"role": "user", "content": prompt})
    with st.chat_message("user"):
        st.markdown(prompt)

    # T·∫°o ph·∫£n h·ªìi t·ª´ GPT
    with st.spinner("ƒêang x·ª≠ l√Ω..."):
        response = generate_response(prompt)
    
    # Th√™m ph·∫£n h·ªìi v√†o l·ªãch s·ª≠
    st.session_state.messages.append({"role": "assistant", "content": response})
    with st.chat_message("assistant"):
        st.markdown(response)